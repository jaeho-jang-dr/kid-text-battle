'use client';

import { useEffect, useState } from 'react';
import { useSearchParams } from 'next/navigation';
import { User, Character, Animal } from '@/types';
import { motion, AnimatePresence } from 'framer-motion';
import BattleOpponents from '@/components/BattleOpponents';

interface BattleMode {
  isActive: boolean;
  selectedCharacter: Character | null;
  opponents: Character[];
  selectedOpponent: Character | null;
  battleResult: any | null;
  isBattling: boolean;
}

export default function PlayPage() {
  const searchParams = useSearchParams();
  const isGuest = searchParams.get('guest') === 'true';
  const [user, setUser] = useState<User | null>(null);
  const [characters, setCharacters] = useState<Character[]>([]);
  const [animals, setAnimals] = useState<Animal[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [showCharacterCreation, setShowCharacterCreation] = useState(false);
  const [selectedAnimal, setSelectedAnimal] = useState<Animal | null>(null);
  const [characterName, setCharacterName] = useState('');
  const [battleText, setBattleText] = useState('');
  const [error, setError] = useState('');
  const [battleMode, setBattleMode] = useState<BattleMode>({
    isActive: false,
    selectedCharacter: null,
    opponents: [],
    selectedOpponent: null,
    battleResult: null,
    isBattling: false
  });
  const [editingCharacter, setEditingCharacter] = useState<Character | null>(null);
  const [newBattleText, setNewBattleText] = useState('');
  const [showHelp, setShowHelp] = useState(false);
  const [showHistory, setShowHistory] = useState(false);
  const [selectedHistoryCharacter, setSelectedHistoryCharacter] = useState<Character | null>(null);
  const [battleHistory, setBattleHistory] = useState<any[]>([]);
  const [isLoadingHistory, setIsLoadingHistory] = useState(false);

  useEffect(() => {
    // 로그인 처리 및 데이터 로드
    initializeUser();
    loadAnimals();
  }, []);

  // 로그아웃 및 첫 화면으로 돌아가기
  const handleLogout = () => {
    localStorage.removeItem('token');
    window.location.href = '/';
  };

  const initializeUser = async () => {
    try {
      // 게스트 로그인
      if (isGuest) {
        const response = await fetch('/api/auth/login', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ isGuest: true })
        });

        const data = await response.json();
        if (data.success) {
          setUser(data.data.user);
          localStorage.setItem('token', data.data.token);
        }
      } else {
        // 토큰 확인
        const token = localStorage.getItem('token');
        if (!token) {
          window.location.href = '/';
          return;
        }

        const response = await fetch('/api/auth/verify', {
          headers: { 'Authorization': `Bearer ${token}` }
        });

        const data = await response.json();
        if (data.success) {
          setUser(data.data.user);
          setCharacters(data.data.user.characters || []);
        } else {
          window.location.href = '/';
        }
      }
    } catch (error) {
      console.error('User initialization error:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const loadAnimals = async () => {
    try {
      const response = await fetch('/api/animals');
      const data = await response.json();
      if (data.success) {
        setAnimals(data.data);
      }
    } catch (error) {
      console.error('Failed to load animals:', error);
    }
  };

  const handleCreateCharacter = async () => {
    if (!selectedAnimal || !characterName || !battleText) {
      setError('모든 항목을 입력해주세요!');
      return;
    }

    try {
      const token = localStorage.getItem('token');
      const response = await fetch('/api/characters', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          animalId: selectedAnimal.id,
          characterName,
          battleText
        })
      });

      const data = await response.json();
      if (data.success) {
        setCharacters([...characters, data.data]);
        setShowCharacterCreation(false);
        setSelectedAnimal(null);
        setCharacterName('');
        setBattleText('');
        setError('');
      } else {
        setError(data.error || '캐릭터 생성에 실패했습니다');
      }
    } catch (error) {
      console.error('Character creation error:', error);
      setError('캐릭터 생성 중 오류가 발생했습니다');
    }
  };

  // 배틀 텍스트 수정 시작
  const startEditBattleText = (character: Character) => {
    setEditingCharacter(character);
    setNewBattleText(character.battleText || '');
  };

  // 배틀 텍스트 업데이트
  const updateBattleText = async () => {
    if (!editingCharacter || !newBattleText) return;

    if (newBattleText.length < 10 || newBattleText.length > 100) {
      setError('배틀 텍스트는 10자 이상 100자 이하로 작성해주세요!');
      return;
    }

    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`/api/characters/${editingCharacter.id}/battle-text`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({ battleText: newBattleText })
      });

      const data = await response.json();
      if (data.success) {
        // 캐릭터 목록 업데이트
        setCharacters(characters.map(char => 
          char.id === editingCharacter.id 
            ? { ...char, battleText: newBattleText }
            : char
        ));
        setEditingCharacter(null);
        setNewBattleText('');
        setError('');
      } else {
        setError(data.error || '배틀 텍스트 수정에 실패했습니다');
      }
    } catch (error) {
      console.error('Battle text update error:', error);
      setError('배틀 텍스트 수정 중 오류가 발생했습니다');
    }
  };

  // 배틀 모드 시작
  const startBattleMode = async (character: Character) => {
    if (character.activeBattlesToday >= 10) {
      setError('오늘의 배틀 횟수를 모두 사용했어요!');
      return;
    }

    try {
      // 대전 가능한 상대 캐릭터 목록 불러오기
      const response = await fetch('/api/characters?excludeUserId=' + user?.id);
      const data = await response.json();
      
      if (data.success && data.data.length > 0) {
        setBattleMode({
          isActive: true,
          selectedCharacter: character,
          opponents: data.data,
          selectedOpponent: null,
          battleResult: null,
          isBattling: false
        });
      } else {
        setError('대전할 상대를 찾을 수 없어요!');
      }
    } catch (error) {
      console.error('Failed to load opponents:', error);
      setError('상대 목록을 불러오는데 실패했어요');
    }
  };

  // 배틀 실행
  const executeBattle = async () => {
    if (!battleMode.selectedCharacter || !battleMode.selectedOpponent) return;

    setBattleMode(prev => ({ ...prev, isBattling: true }));
    setError('');

    try {
      const token = localStorage.getItem('token');
      const response = await fetch('/api/battles', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          attackerId: battleMode.selectedCharacter.id,
          defenderId: battleMode.selectedOpponent.id
        })
      });

      const data = await response.json();
      
      if (data.success) {
        setBattleMode(prev => ({
          ...prev,
          battleResult: data.data,
          isBattling: false
        }));

        // 캐릭터 정보 업데이트
        const updatedCharacters = characters.map(char => {
          if (char.id === battleMode.selectedCharacter.id) {
            return {
              ...char,
              activeBattlesToday: char.activeBattlesToday + 1,
              wins: char.wins + (data.data.result.winner === 'attacker' ? 1 : 0),
              losses: char.losses + (data.data.result.winner === 'defender' ? 1 : 0),
              baseScore: char.baseScore + data.data.result.attackerScoreChange
            };
          }
          return char;
        });
        setCharacters(updatedCharacters);
      } else {
        setError(data.error || '배틀 중 오류가 발생했어요');
        setBattleMode(prev => ({ ...prev, isBattling: false }));
      }
    } catch (error) {
      console.error('Battle execution error:', error);
      setError('배틀 실행 중 오류가 발생했어요');
      setBattleMode(prev => ({ ...prev, isBattling: false }));
    }
  };

  // 배틀 모드 종료
  const exitBattleMode = () => {
    setBattleMode({
      isActive: false,
      selectedCharacter: null,
      opponents: [],
      selectedOpponent: null,
      battleResult: null,
      isBattling: false
    });
    setError('');
  };

  // 대기 중인 상대 선택 핸들러
  const handleSelectOpponentFromList = async (opponent: any) => {
    if (characters.length === 0) {
      alert('먼저 캐릭터를 만들어주세요!');
      setShowCharacterCreation(true);
      return;
    }

    // 사용 가능한 캐릭터 확인 (봇과의 배틀은 무제한)
    const availableCharacters = opponent.isBot 
      ? characters // 봇과의 배틀은 모든 캐릭터 사용 가능
      : characters.filter(char => char.activeBattlesToday < 10);
      
    if (availableCharacters.length === 0) {
      alert('모든 캐릭터가 오늘의 배틀을 모두 마쳤어요!\n🤖 대기 계정과는 무제한 배틀이 가능해요!');
      return;
    }

    // 캐릭터가 하나면 바로 선택, 여러 개면 선택 모달
    if (availableCharacters.length === 1) {
      setBattleMode({
        isActive: true,
        selectedCharacter: availableCharacters[0],
        opponents: [],
        selectedOpponent: opponent,
        battleResult: null,
        isBattling: false
      });
    } else {
      // 여러 캐릭터 중 선택하기 위한 상태 설정
      setBattleMode({
        isActive: false,
        selectedCharacter: null,
        opponents: availableCharacters,
        selectedOpponent: opponent,
        battleResult: null,
        isBattling: false
      });
    }
  };

  if (isLoading) {
    return (
      <div className="fixed inset-0 flex items-center justify-center bg-gradient-to-b from-blue-100 to-green-100">
        <motion.div
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          transition={{ duration: 0.3 }}
          className="text-center"
        >
          <motion.div
            animate={{ rotate: 360 }}
            transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
            className="emoji-xl mb-4"
          >
            🎮
          </motion.div>
          <p className="text-2xl font-bold text-blue-600">게임을 준비하고 있어요...</p>
        </motion.div>
      </div>
    );
  }

  return (
    <main className="fixed inset-0 bg-gradient-to-b from-blue-100 to-green-100 overflow-hidden">
      <div className="h-full flex flex-col">
        <header className="safe-top bg-white/90 backdrop-blur-sm shadow-md">
          <div className="px-4 py-3">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <motion.h1 
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  className="text-2xl font-bold text-gradient"
                >
                  동물 배틀
                </motion.h1>
                <motion.button
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                  onClick={() => setShowHelp(true)}
                  className="text-2xl"
                >
                  ❓
                </motion.button>
              </div>
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={handleLogout}
                className="bg-red-500 text-white rounded-full p-2.5 shadow-lg"
              >
                <span className="text-xl">🏠</span>
              </motion.button>
            </div>
            <div className="mt-2 flex items-center justify-between text-sm">
              <span className="text-gray-600">
                {user?.displayName || user?.email || '플레이어'}
              </span>
              <span className="bg-blue-100 text-blue-700 px-3 py-1 rounded-full font-medium">
                캐릭터 {characters.length}/3
              </span>
            </div>
          </div>
        </header>

        {/* Main Content */}
        <div className="flex-1 overflow-y-auto px-4 py-4 pb-20">
          {!showCharacterCreation ? (
            <>
              {/* 내 캐릭터 섹션 */}
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="mb-4"
              >
                <h2 className="text-xl font-bold mb-3 flex items-center gap-2">
                  <span className="emoji-md">🦁</span>
                  <span>내 캐릭터</span>
                </h2>
                
                {characters.length === 0 ? (
                  <motion.div
                    initial={{ scale: 0.9, opacity: 0 }}
                    animate={{ scale: 1, opacity: 1 }}
                    className="mobile-card text-center py-12"
                  >
                    <div className="emoji-xl mb-4 floating">🤔</div>
                    <p className="text-lg mb-6">아직 캐릭터가 없어요!</p>
                    <button
                      onClick={() => setShowCharacterCreation(true)}
                      className="btn-success shadow-lg animate-pulse"
                    >
                      첫 캐릭터 만들기 ✨
                    </button>
                  </motion.div>
                ) : (
                  <>
                    <div className="space-y-3 mb-4">
                      {characters.map((character, index) => (
                        <motion.div
                          key={character.id}
                          initial={{ opacity: 0, x: -20 }}
                          animate={{ opacity: 1, x: 0 }}
                          transition={{ delay: index * 0.1 }}
                          className="mobile-card"
                        >
                          <div className="flex items-center gap-4">
                            <motion.div
                              whileHover={{ scale: 1.1 }}
                              className="emoji-xl"
                            >
                              {character.animal?.emoji || '🐾'}
                            </motion.div>
                            <div className="flex-1">
                              <h3 className="font-bold text-lg">{character.characterName}</h3>
                              <p className="text-sm text-gray-600">{character.animal?.koreanName}</p>
                              <div className="flex gap-4 mt-1 text-xs">
                                <span>📊 {character.baseScore}점</span>
                                <span>🏆 {character.wins}승</span>
                                <span>💔 {character.losses}패</span>
                              </div>
                            </div>
                          </div>
                          
                          <div className="mt-3 flex gap-2">
                            <button
                              onClick={() => startBattleMode(character)}
                              disabled={character.activeBattlesToday >= 10}
                              className={`flex-1 py-3 px-4 rounded-xl font-bold transition-all ${
                                character.activeBattlesToday >= 10
                                  ? 'bg-gray-300 text-gray-500'
                                  : 'bg-gradient-to-r from-red-500 to-orange-500 text-white shadow-md active:scale-95'
                              }`}
                            >
                              {character.activeBattlesToday >= 10 ? (
                                <span>😴 휴식 중</span>
                              ) : (
                                <span>⚔️ 배틀!</span>
                              )}
                            </button>
                            <button
                              onClick={() => startEditBattleText(character)}
                              className="bg-purple-500 text-white p-3 rounded-xl shadow-md active:scale-95"
                            >
                              <span>✏️</span>
                            </button>
                          </div>
                          
                          <div className="mt-2">
                            <div className="flex justify-between text-xs text-gray-600 mb-1">
                              <span>오늘 배틀</span>
                              <span>{character.activeBattlesToday}/10</span>
                            </div>
                            <div className="stat-bar">
                              <div
                                className="stat-bar-fill"
                                style={{ width: `${(character.activeBattlesToday / 10) * 100}%` }}
                              />
                            </div>
                          </div>
                        </motion.div>
                      ))}
                    </div>
                    
                    {characters.length < 3 && (
                      <motion.button
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                        onClick={() => setShowCharacterCreation(true)}
                        className="w-full btn-success shadow-lg"
                      >
                        <span className="text-lg">➕ 새 캐릭터 만들기</span>
                      </motion.button>
                    )}
                  </>
                )}
              </motion.div>

              {/* 대기 중인 상대 리스트 */}
              {characters.length > 0 && (
                <BattleOpponents
                  currentCharacter={characters[0]}
                  onSelectOpponent={handleSelectOpponentFromList}
                  onRefresh={() => {
                    // 캐릭터 정보 새로고침
                    initializeUser();
                  }}
                />
              )}
            </>
          ) : (
            <>
              {/* 캐릭터 생성 화면 */}
              <motion.div
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                className="mobile-card"
              >
              <h2 className="text-xl font-bold mb-4 text-center">
                <span className="emoji-md">🎨</span> 새 캐릭터 만들기
              </h2>
              
              {/* 동물 선택 */}
              <div className="mb-6">
                <h3 className="font-bold mb-3 flex items-center gap-2">
                  <span className="bg-blue-100 text-blue-700 px-2 py-1 rounded-full text-sm">1</span>
                  동물 선택하기
                </h3>
                <div className="grid grid-cols-4 gap-2">
                  {animals.map((animal) => (
                    <motion.button
                      key={animal.id}
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      onClick={() => setSelectedAnimal(animal)}
                      className={`p-3 rounded-xl border-2 transition-all ${
                        selectedAnimal?.id === animal.id
                          ? 'border-blue-500 bg-blue-50 shadow-md'
                          : 'border-gray-200 bg-white'
                      }`}
                    >
                      <div className="emoji-lg mb-1">{animal.emoji}</div>
                      <p className="text-xs">{animal.koreanName}</p>
                    </motion.button>
                  ))}
                </div>
              </div>

              {/* 캐릭터 이름 */}
              <div className="mb-6">
                <h3 className="font-bold mb-3 flex items-center gap-2">
                  <span className="bg-blue-100 text-blue-700 px-2 py-1 rounded-full text-sm">2</span>
                  캐릭터 이름
                </h3>
                <input
                  type="text"
                  value={characterName}
                  onChange={(e) => setCharacterName(e.target.value)}
                  className="w-full px-4 py-3 border-2 border-gray-300 rounded-xl text-lg focus:border-blue-500 focus:outline-none"
                  placeholder="멋진 이름을 지어주세요!"
                  maxLength={20}
                />
                <div className="flex justify-between mt-2 text-sm">
                  <span className={characterName.length > 0 ? 'text-blue-600' : 'text-gray-500'}>
                    {characterName.length}/20자
                  </span>
                  {characterName.length > 0 && selectedAnimal && (
                    <span className="text-gray-600">
                      {selectedAnimal.emoji} {characterName}
                    </span>
                  )}
                </div>
              </div>

              {/* 배틀 텍스트 */}
              <div className="mb-6">
                <h3 className="font-bold mb-3 flex items-center gap-2">
                  <span className="bg-blue-100 text-blue-700 px-2 py-1 rounded-full text-sm">3</span>
                  배틀 텍스트
                </h3>
                <textarea
                  value={battleText}
                  onChange={(e) => setBattleText(e.target.value)}
                  className="w-full px-4 py-3 border-2 border-gray-300 rounded-xl text-lg focus:border-blue-500 focus:outline-none resize-none"
                  placeholder="강력한 배틀 텍스트를 써보세요!
예) 나는 정글의 왕! 용감하고 강력한 사자다!"
                  rows={3}
                  maxLength={100}
                />
                <div className="flex justify-between mt-2 text-sm">
                  <span className={`${
                    battleText.length < 10 ? 'text-red-600' : 
                    battleText.length > 100 ? 'text-red-600' : 'text-green-600'
                  }`}>
                    {battleText.length}/100자
                  </span>
                  {battleText.length >= 10 && battleText.length <= 100 && (
                    <span className="text-green-600">✨ 좋아요!</span>
                  )}
                </div>
              </div>

              {/* 에러 메시지 */}
              <AnimatePresence>
                {error && (
                  <motion.div
                    initial={{ opacity: 0, y: -10 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -10 }}
                    className="mb-4 p-3 bg-red-100 text-red-700 rounded-xl text-sm"
                  >
                    {error}
                  </motion.div>
                )}
              </AnimatePresence>

              {/* 버튼들 */}
              <div className="flex gap-3">
                <button
                  onClick={() => {
                    setShowCharacterCreation(false);
                    setSelectedAnimal(null);
                    setCharacterName('');
                    setBattleText('');
                    setError('');
                  }}
                  className="flex-1 btn-secondary"
                >
                  취소
                </button>
                <button
                  onClick={handleCreateCharacter}
                  disabled={!selectedAnimal || !characterName || battleText.length < 10}
                  className={`flex-1 transition-all ${
                    !selectedAnimal || !characterName || battleText.length < 10
                      ? 'bg-gray-300 text-gray-500 py-3 px-6 rounded-xl font-bold'
                      : 'btn-success shadow-lg'
                  }`}
                >
                  만들기!
                </button>
              </div>
            </motion.div>
            </>
          )}
        </div>


        {/* 배틀 모드 UI */}
        <AnimatePresence>
          {battleMode.isActive && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50"
            >
              <motion.div
                initial={{ scale: 0.8, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                exit={{ scale: 0.8, opacity: 0 }}
                className="bg-white rounded-3xl shadow-2xl p-6 w-full max-w-lg max-h-[90vh] overflow-y-auto">
                {!battleMode.battleResult ? (
                  <>
                    <h2 className="text-2xl font-bold text-center mb-6">⚔️ 배틀 준비!</h2>
                    
                    {/* VS 화면 */}
                    <div className="bg-gradient-to-br from-red-50 to-orange-50 rounded-2xl p-6 mb-6">
                      <div className="flex items-center justify-around">
                        <motion.div
                          initial={{ scale: 0, rotate: -180 }}
                          animate={{ scale: 1, rotate: 0 }}
                          transition={{ type: "spring" }}
                          className="text-center"
                        >
                          <div className="emoji-xl mb-2">{battleMode.selectedCharacter?.animal?.emoji || '🐾'}</div>
                          <h3 className="font-bold">{battleMode.selectedCharacter?.characterName}</h3>
                          <p className="text-xs text-gray-600">내 캐릭터</p>
                        </motion.div>
                        
                        <motion.div
                          animate={{ scale: [1, 1.2, 1] }}
                          transition={{ duration: 1, repeat: Infinity }}
                          className="text-3xl font-bold text-red-500"
                        >
                          VS
                        </motion.div>
                        
                        <motion.div
                          initial={{ scale: 0, rotate: 180 }}
                          animate={{ scale: 1, rotate: 0 }}
                          transition={{ type: "spring", delay: 0.2 }}
                          className="text-center"
                        >
                          {battleMode.selectedOpponent ? (
                            <>
                              <div className="emoji-xl mb-2">{battleMode.selectedOpponent.animalIcon || '🐾'}</div>
                              <h3 className="font-bold">{battleMode.selectedOpponent.characterName}</h3>
                              <p className="text-xs text-gray-600">
                                상대
                                {battleMode.selectedOpponent.isBot && (
                                  <span className="block text-purple-600">🤖 대기 계정</span>
                                )}
                              </p>
                            </>
                          ) : (
                            <>
                              <div className="emoji-xl mb-2 animate-pulse">❓</div>
                              <h3 className="font-bold">???</h3>
                              <p className="text-xs text-gray-600">선택 대기</p>
                            </>
                          )}
                        </motion.div>
                      </div>
                    </div>

                    {/* 상대 선택 */}
                    {!battleMode.selectedOpponent && (
                      <>
                        <h3 className="font-bold mb-3">상대 선택</h3>
                        <div className="grid grid-cols-2 gap-3 mb-4 max-h-60 overflow-y-auto">
                          {battleMode.opponents.slice(0, 8).map((opponent, index) => (
                            <motion.button
                              key={opponent.id}
                              initial={{ opacity: 0, y: 20 }}
                              animate={{ opacity: 1, y: 0 }}
                              transition={{ delay: index * 0.05 }}
                              whileHover={{ scale: 1.05 }}
                              whileTap={{ scale: 0.95 }}
                              onClick={() => setBattleMode(prev => ({ ...prev, selectedOpponent: opponent }))}
                              className="mobile-card p-3 border-2 border-gray-200 hover:border-blue-400"
                            >
                              <div className="emoji-md mb-1">{opponent.animal?.emoji || '🐾'}</div>
                              <p className="font-bold text-sm">{opponent.characterName}</p>
                              <p className="text-xs text-gray-600">📊 {opponent.baseScore}</p>
                            </motion.button>
                          ))}
                        </div>
                      </>
                    )}

                    {/* 배틀 시작 버튼 */}
                    {battleMode.selectedOpponent && (
                      <motion.div
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        className="text-center"
                      >
                        <motion.button
                          whileHover={{ scale: 1.05 }}
                          whileTap={{ scale: 0.95 }}
                          onClick={executeBattle}
                          disabled={battleMode.isBattling}
                          className="w-full bg-gradient-to-r from-red-500 to-orange-500 text-white font-bold py-4 rounded-xl text-xl shadow-lg disabled:opacity-50"
                        >
                          {battleMode.isBattling ? (
                            <motion.span
                              animate={{ opacity: [1, 0.5, 1] }}
                              transition={{ duration: 1, repeat: Infinity }}
                            >
                              배틀 중... ⚔️
                            </motion.span>
                          ) : (
                            <span>배틀 시작! 🔥</span>
                          )}
                        </motion.button>
                      </motion.div>
                    )}

                    <button
                      onClick={exitBattleMode}
                      className="mt-4 w-full btn-secondary"
                    >
                      취소
                    </button>
                  </>
                ) : (
                  <>
                    {/* 배틀 결과 */}
                    <motion.div
                      initial={{ scale: 0.8, opacity: 0 }}
                      animate={{ scale: 1, opacity: 1 }}
                      className="text-center"
                    >
                      <div className="emoji-xl mb-4">
                        {battleMode.battleResult.result.winner === 'attacker' ? '🎆' : '💔'}
                      </div>
                      <h2 className="text-2xl font-bold mb-6">
                        {battleMode.battleResult.result.winner === 'attacker' ? (
                          <span className="text-gradient">승리!</span>
                        ) : (
                          <span className="text-gray-600">패배...</span>
                        )}
                      </h2>
                    </motion.div>
                    
                    <motion.div
                      initial={{ y: 20, opacity: 0 }}
                      animate={{ y: 0, opacity: 1 }}
                      transition={{ delay: 0.3 }}
                      className="bg-gradient-to-br from-blue-50 to-purple-50 rounded-2xl p-5 mb-6"
                    >
                      <p className="font-bold mb-3 text-lg">{battleMode.battleResult.result.judgment}</p>
                      <p className="text-gray-700 text-sm leading-relaxed mb-4">{battleMode.battleResult.result.reasoning}</p>
                      
                      {/* 점수 변화 */}
                      <div className="grid grid-cols-2 gap-4 mb-4">
                        <motion.div
                          initial={{ scale: 0 }}
                          animate={{ scale: 1 }}
                          transition={{ delay: 0.5, type: "spring" }}
                          className="bg-white rounded-xl p-3 text-center"
                        >
                          <p className="text-xs text-gray-600 mb-1">내 점수</p>
                          <p className={`text-2xl font-bold ${
                            battleMode.battleResult.result.attackerScoreChange > 0 ? 'text-green-600' : 'text-red-600'
                          }`}>
                            {battleMode.battleResult.result.attackerScoreChange > 0 ? '+' : ''}
                            {battleMode.battleResult.result.attackerScoreChange}
                          </p>
                        </motion.div>
                        <motion.div
                          initial={{ scale: 0 }}
                          animate={{ scale: 1 }}
                          transition={{ delay: 0.6, type: "spring" }}
                          className="bg-white rounded-xl p-3 text-center"
                        >
                          <p className="text-xs text-gray-600 mb-1">상대 점수</p>
                          <p className={`text-2xl font-bold ${
                            battleMode.battleResult.result.defenderScoreChange > 0 ? 'text-green-600' : 'text-red-600'
                          }`}>
                            {battleMode.battleResult.result.defenderScoreChange > 0 ? '+' : ''}
                            {battleMode.battleResult.result.defenderScoreChange}
                          </p>
                        </motion.div>
                      </div>

                      {/* 격려 메시지 */}
                      {battleMode.battleResult.result.encouragement && (
                        <motion.p
                          initial={{ opacity: 0 }}
                          animate={{ opacity: 1 }}
                          transition={{ delay: 0.8 }}
                          className="text-center font-medium text-purple-600 bg-purple-100 rounded-xl p-3"
                        >
                          {battleMode.battleResult.result.encouragement}
                        </motion.p>
                      )}
                    </motion.div>

                    <motion.button
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      transition={{ delay: 1 }}
                      onClick={exitBattleMode}
                      className="w-full btn-primary shadow-lg"
                    >
                      확인
                    </motion.button>
                  </>
                )}
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* 캐릭터 선택 모달 */}
        <AnimatePresence>
          {battleMode.selectedOpponent && battleMode.opponents.length > 0 && !battleMode.isActive && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50"
            >
              <motion.div
                initial={{ scale: 0.8, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                exit={{ scale: 0.8, opacity: 0 }}
                className="bg-white rounded-3xl shadow-2xl p-6 w-full max-w-md max-h-[90vh] overflow-y-auto"
              >
                <h2 className="text-xl font-bold text-center mb-4">
                  어떤 캐릭터로 도전? 🤔
                </h2>
                
                {/* 상대 정보 */}
                <div className="mobile-card mb-4 text-center bg-gradient-to-br from-purple-50 to-pink-50">
                  <div className="emoji-lg mb-2">{battleMode.selectedOpponent.animalIcon}</div>
                  <p className="font-bold">{battleMode.selectedOpponent.characterName}</p>
                  <p className="text-sm text-gray-600">
                    {battleMode.selectedOpponent.animalName}
                    {battleMode.selectedOpponent.isBot && (
                      <span className="block text-purple-600 mt-1">
                        🤖 대기 계정 (무제한)
                      </span>
                    )}
                  </p>
                  <div className="flex justify-center gap-4 mt-2 text-xs">
                    <span>ELO: {battleMode.selectedOpponent.eloScore}</span>
                    <span>승률: {battleMode.selectedOpponent.winRate}%</span>
                  </div>
                </div>

                {/* 내 캐릭터 리스트 */}
                <div className="space-y-3 mb-4 max-h-60 overflow-y-auto">
                  {battleMode.opponents.map((character, index) => (
                    <motion.button
                      key={character.id}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.05 }}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.95 }}
                      onClick={() => {
                        setBattleMode(prev => ({
                          ...prev,
                          isActive: true,
                          selectedCharacter: character,
                          opponents: []
                        }));
                      }}
                      className="mobile-card w-full text-left border-2 border-blue-400 hover:bg-blue-50"
                    >
                      <div className="flex items-center gap-3">
                        <div className="emoji-lg">{character.animal?.emoji || '🐾'}</div>
                        <div className="flex-1">
                          <p className="font-bold">{character.characterName}</p>
                          <p className="text-xs text-gray-600">
                            {character.animal?.koreanName}
                          </p>
                          <div className="flex gap-3 mt-1 text-xs">
                            <span>ELO: {character.eloScore}</span>
                            <span>{character.wins}승 {character.losses}패</span>
                          </div>
                        </div>
                        <div className="text-right">
                          <p className="text-xs">
                            오늘: {character.activeBattlesToday}/10
                          </p>
                          {battleMode.selectedOpponent?.isBot && (
                            <p className="text-xs text-purple-600">무제한</p>
                          )}
                        </div>
                      </div>
                    </motion.button>
                  ))}
                </div>

                <button
                  onClick={() => {
                    setBattleMode({
                      isActive: false,
                      selectedCharacter: null,
                      opponents: [],
                      selectedOpponent: null,
                      battleResult: null,
                      isBattling: false
                    });
                  }}
                  className="w-full btn-secondary"
                >
                  취소
                </button>
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* 에러 메시지 */}
        <AnimatePresence>
          {error && !battleMode.isActive && !editingCharacter && (
            <motion.div
              initial={{ opacity: 0, y: -20, x: 20 }}
              animate={{ opacity: 1, y: 0, x: 0 }}
              exit={{ opacity: 0, y: -20, x: 20 }}
              className="fixed top-20 right-4 bg-red-100 border-2 border-red-300 text-red-700 px-4 py-3 rounded-xl shadow-lg max-w-xs"
            >
              <p className="font-bold mb-1">앗! 😨</p>
              <p className="text-sm">{error}</p>
            </motion.div>
          )}
        </AnimatePresence>

        {/* 도움말 모달 */}
        <AnimatePresence>
          {showHelp && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50"
              onClick={() => setShowHelp(false)}
            >
              <motion.div
                initial={{ scale: 0.8, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                exit={{ scale: 0.8, opacity: 0 }}
                onClick={(e) => e.stopPropagation()}
                className="bg-white rounded-3xl shadow-2xl p-6 w-full max-w-md"
              >
                <h2 className="text-2xl font-bold mb-4 text-center">
                  <span className="emoji-lg">💡</span> 도움말
                </h2>
                
                <div className="space-y-4 mb-6">
                  <div className="mobile-card bg-yellow-50">
                    <h3 className="font-bold mb-2 flex items-center gap-2">
                      <span className="emoji-sm">🦁</span> 캐릭터
                    </h3>
                    <ul className="text-sm space-y-1 text-gray-700">
                      <li>• 최대 3개까지 만들 수 있어요</li>
                      <li>• 각 캐릭터마다 고유한 이름과 배틀 텍스트가 필요해요</li>
                    </ul>
                  </div>
                  
                  <div className="mobile-card bg-blue-50">
                    <h3 className="font-bold mb-2 flex items-center gap-2">
                      <span className="emoji-sm">⚔️</span> 배틀
                    </h3>
                    <ul className="text-sm space-y-1 text-gray-700">
                      <li>• 하루에 캐릭터당 10번 배틀 가능</li>
                      <li>• 🤖 대기 계정과는 무제한 배틀!</li>
                      <li>• AI 심판이 공정하게 판정해요</li>
                    </ul>
                  </div>
                  
                  <div className="mobile-card bg-red-50">
                    <h3 className="font-bold mb-2 flex items-center gap-2">
                      <span className="emoji-sm">⚠️</span> 주의사항
                    </h3>
                    <ul className="text-sm space-y-1 text-gray-700">
                      <li>• 배틀 텍스트는 10~100자</li>
                      <li>• 부적절한 내용은 경고를 받아요</li>
                      <li>• 친구들과 즐겁게 플레이해요!</li>
                    </ul>
                  </div>
                </div>
                
                <button
                  onClick={() => setShowHelp(false)}
                  className="w-full btn-primary"
                >
                  알겠어요!
                </button>
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>

        {/* 배틀 텍스트 수정 모달 */}
        <AnimatePresence>
          {editingCharacter && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4"
              onClick={() => {
                setEditingCharacter(null);
                setNewBattleText('');
                setError('');
              }}
            >
              <motion.div
                initial={{ scale: 0.8, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                exit={{ scale: 0.8, opacity: 0 }}
                onClick={(e) => e.stopPropagation()}
                className="bg-white rounded-3xl shadow-2xl w-full max-w-md p-6"
              >
                <h2 className="text-xl font-bold mb-4 text-center flex items-center justify-center gap-2">
                  <span className="emoji-md">✏️</span>
                  <span>배틀 텍스트 수정</span>
                </h2>

                {/* 캐릭터 정보 */}
                <div className="mobile-card bg-gradient-to-br from-purple-50 to-pink-50 mb-4 text-center">
                  <div className="emoji-xl mb-2">{editingCharacter.animal?.emoji}</div>
                  <h3 className="font-bold text-lg">{editingCharacter.characterName}</h3>
                  <p className="text-sm text-gray-600">{editingCharacter.animal?.koreanName}</p>
                </div>

                {/* 배틀 텍스트 입력 */}
                <div className="mb-4">
                  <label className="block font-bold mb-2">
                    새로운 배틀 텍스트
                  </label>
                  <textarea
                    value={newBattleText}
                    onChange={(e) => setNewBattleText(e.target.value.slice(0, 100))}
                    placeholder="예: 나는 정글의 왕! 용감하고 강력한 사자다!"
                    className="w-full p-4 border-2 border-gray-300 rounded-xl focus:border-purple-500 focus:outline-none resize-none h-28 text-base"
                  />
                  <div className="flex justify-between mt-2 text-sm">
                    <span className={`${
                      newBattleText.length < 10 ? 'text-red-600' : 
                      newBattleText.length > 100 ? 'text-red-600' : 'text-green-600'
                    }`}>
                      {newBattleText.length}/100자
                    </span>
                    {newBattleText.length >= 10 && newBattleText.length <= 100 && (
                      <motion.span
                        initial={{ opacity: 0, scale: 0.8 }}
                        animate={{ opacity: 1, scale: 1 }}
                        className="text-green-600"
                      >
                        ✨ 좋아요!
                      </motion.span>
                    )}
                  </div>
                </div>

                {/* 에러 메시지 */}
                <AnimatePresence>
                  {error && (
                    <motion.div
                      initial={{ opacity: 0, y: -10 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -10 }}
                      className="bg-red-100 border-2 border-red-300 rounded-xl p-3 mb-4 text-red-700 text-sm"
                    >
                      {error}
                    </motion.div>
                  )}
                </AnimatePresence>

                {/* 버튼 */}
                <div className="flex gap-3">
                  <button
                    onClick={updateBattleText}
                    disabled={newBattleText.length < 10 || newBattleText.length > 100}
                    className={`flex-1 font-bold py-3 px-6 rounded-xl transition-all ${
                      newBattleText.length < 10 || newBattleText.length > 100
                        ? 'bg-gray-300 text-gray-500'
                        : 'bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg active:scale-95'
                    }`}
                  >
                    수정하기
                  </button>
                  <button
                    onClick={() => {
                      setEditingCharacter(null);
                      setNewBattleText('');
                      setError('');
                    }}
                    className="flex-1 btn-secondary"
                  >
                    취소
                  </button>
                </div>
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* 배틀 히스토리 모달 */}
        <AnimatePresence>
          {showHistory && selectedHistoryCharacter && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4"
              onClick={() => {
                setShowHistory(false);
                setSelectedHistoryCharacter(null);
                setBattleHistory([]);
              }}
            >
              <motion.div
                initial={{ scale: 0.8, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                exit={{ scale: 0.8, opacity: 0 }}
                onClick={(e) => e.stopPropagation()}
                className="bg-white rounded-3xl shadow-2xl w-full max-w-md max-h-[90vh] overflow-hidden flex flex-col"
              >
                {/* 헤더 */}
                <div className="bg-gradient-to-r from-blue-500 to-teal-500 text-white p-6">
                  <div className="flex items-center justify-between mb-2">
                    <h2 className="text-xl font-bold flex items-center gap-2">
                      <span>📜</span>
                      <span>배틀 히스토리</span>
                    </h2>
                    <button
                      onClick={() => {
                        setShowHistory(false);
                        setSelectedHistoryCharacter(null);
                        setBattleHistory([]);
                      }}
                      className="text-2xl bg-white/20 w-8 h-8 rounded-full flex items-center justify-center"
                    >
                      ✕
                    </button>
                  </div>
                  <div className="flex items-center gap-3">
                    <div className="emoji-lg">{selectedHistoryCharacter.animal?.emoji}</div>
                    <div>
                      <h3 className="font-bold">{selectedHistoryCharacter.characterName}</h3>
                      <p className="text-sm opacity-90">
                        {selectedHistoryCharacter.wins}승 {selectedHistoryCharacter.losses}패
                      </p>
                    </div>
                  </div>
                </div>

                {/* 내용 */}
                <div className="flex-1 overflow-y-auto p-4">
                  {isLoadingHistory ? (
                    <div className="text-center py-8">
                      <motion.div
                        animate={{ rotate: 360 }}
                        transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
                        className="emoji-xl inline-block mb-4"
                      >
                        ⏳
                      </motion.div>
                      <p className="text-gray-600">히스토리를 불러오는 중...</p>
                    </div>
                  ) : battleHistory.length === 0 ? (
                    <div className="text-center py-8">
                      <div className="emoji-xl mb-4">📭</div>
                      <p className="text-gray-600">아직 배틀 기록이 없어요</p>
                    </div>
                  ) : (
                    <div className="space-y-3">
                      {battleHistory.map((battle, index) => (
                        <motion.div
                          key={battle.id}
                          initial={{ opacity: 0, y: 20 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ delay: index * 0.05 }}
                          className={`mobile-card border-2 ${
                            battle.won ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50'
                          }`}
                        >
                          <div className="flex items-center justify-between mb-2">
                            <div className="flex items-center gap-2">
                              <span className={`text-2xl ${
                                battle.won ? 'text-green-600' : 'text-red-600'
                              }`}>
                                {battle.won ? '🏆' : '💔'}
                              </span>
                              <span className={`font-bold ${
                                battle.won ? 'text-green-700' : 'text-red-700'
                              }`}>
                                {battle.won ? '승리' : '패배'}
                              </span>
                            </div>
                            <span className="text-xs text-gray-500">
                              {new Date(battle.createdAt).toLocaleDateString()}
                            </span>
                          </div>
                          
                          <div className="flex items-center justify-between mb-2">
                            <div className="text-center">
                              <div className="emoji-md">{battle.myCharacter.emoji}</div>
                              <p className="text-xs font-medium">{battle.myCharacter.name}</p>
                              <p className={`text-xs font-bold ${
                                battle.myCharacter.scoreChange > 0 ? 'text-green-600' : 'text-red-600'
                              }`}>
                                {battle.myCharacter.scoreChange > 0 ? '+' : ''}{battle.myCharacter.scoreChange}
                              </p>
                            </div>
                            
                            <span className="text-lg font-bold text-gray-400">VS</span>
                            
                            <div className="text-center">
                              <div className="emoji-md">{battle.opponent.emoji}</div>
                              <p className="text-xs font-medium">{battle.opponent.name}</p>
                              <p className={`text-xs font-bold ${
                                battle.opponent.scoreChange > 0 ? 'text-green-600' : 'text-red-600'
                              }`}>
                                {battle.opponent.scoreChange > 0 ? '+' : ''}{battle.opponent.scoreChange}
                              </p>
                            </div>
                          </div>
                          
                          <details className="text-xs">
                            <summary className="cursor-pointer text-gray-600 hover:text-gray-800">
                              판정 내용 보기
                            </summary>
                            <div className="mt-2 p-2 bg-white/50 rounded-lg">
                              <p className="font-medium mb-1">{battle.judgment}</p>
                              <p className="text-gray-600 text-xs">{battle.reasoning}</p>
                            </div>
                          </details>
                        </motion.div>
                      ))}
                    </div>
                  )}
                </div>
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>
        
        {/* 하단 내비게이션 바 */}
        <motion.nav
          initial={{ y: 100 }}
          animate={{ y: 0 }}
          className="fixed bottom-0 left-0 right-0 bg-white/90 backdrop-blur-sm shadow-lg safe-bottom"
        >
          <div className="flex justify-around items-center py-2">
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
              onClick={() => window.location.href = '/'}
              className="flex flex-col items-center p-2"
            >
              <span className="emoji-md">🏠</span>
              <span className="text-xs mt-1">홈</span>
            </motion.button>
            
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
              onClick={() => window.location.href = '/leaderboard'}
              className="flex flex-col items-center p-2"
            >
              <span className="emoji-md">🏆</span>
              <span className="text-xs mt-1">순위</span>
            </motion.button>
            
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
              onClick={() => setShowCharacterCreation(true)}
              disabled={characters.length >= 3}
              className="flex flex-col items-center p-2"
            >
              <div className="bg-gradient-to-r from-green-500 to-blue-500 text-white rounded-full p-3 shadow-lg">
                <span className="text-2xl">➕</span>
              </div>
            </motion.button>
            
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
              onClick={() => initializeUser()}
              className="flex flex-col items-center p-2"
            >
              <span className="emoji-md">🔄</span>
              <span className="text-xs mt-1">새로고침</span>
            </motion.button>
            
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
              onClick={() => setShowHelp(true)}
              className="flex flex-col items-center p-2"
            >
              <span className="emoji-md">❓</span>
              <span className="text-xs mt-1">도움</span>
            </motion.button>
          </div>
        </motion.nav>
      </div>
    </main>
  );
}